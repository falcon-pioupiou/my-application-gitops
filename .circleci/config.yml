version: 2.1

jobs:
  deploy_image:
    docker:
      - image: quay.io/crowdstrike/cloud-tools-image:latest
    steps:
      - checkout
      #- setup_remote_docker:
      #    version: "20.10.11"
      #    docker_layer_caching: true

      - run:
          name: CrowdStrike Image Policy check
          command: |
            # get API token
            FALCON_API_BEARER_TOKEN=$(curl \
            --silent \
            --header "Content-Type: application/x-www-form-urlencoded" \
            --data "client_id=${FALCON_CLIENT_ID}&client_secret=${FALCON_CLIENT_SECRET}" \
            --request POST \
            --url "https://api.crowdstrike.com/oauth2/token" | \
            python3 -c "import sys, json; print(json.load(sys.stdin)['access_token'])")

            IMAGE_VERSION=$(cat MY_APP_VERSION)
            RESPONSE=$(curl -s -X GET -H "Authorization: Bearer ${FALCON_API_BEARER_TOKEN}" \
                        "https://container-upload.$FALCON_CLOUD_REGION.crowdstrike.com/policy-checks?policy_type=image-prevention-policy&repository=my-application&tag=$IMAGE_VERSION" |\
                        jq -r '.resources[0]' )

            DENY=$(echo $RESPONSE | jq -r '.deny')
            ACTION=$(echo $RESPONSE | jq -r '.action')
            POLICY_NAME=$(echo $RESPONSE | jq -r '.policy.name')
            POLICY_DESCRIPTION=$(echo $RESPONSE | jq -r '.policy.description')

            if [[ "$DENY" == "true" && "$ACTION" == "block" ]]; then
                echo "============================================================"
                echo "IMAGE BLOCKED DUE TO SECURITY POLICY"
                echo "${POLICY_NAME} - ${POLICY_DESCRIPTION}"
                echo "============================================================"

                echo "Malware :"
                curl -s -X GET -H "Authorization: Bearer ${FALCON_API_BEARER_TOKEN}" \
                                "https://container-upload.us-1.crowdstrike.com/reports?repository=my-application&tag=$IMAGE_VERSION" |\
                                jq -r '.ELFBinaries[] | select(.Malicious == true) | "\(.Malicious) - \(.Permissions) : \(.Path)"'
                
                echo "Detections :"
                curl -s -X GET -H "Authorization: Bearer ${FALCON_API_BEARER_TOKEN}" \
                                "https://container-upload.us-1.crowdstrike.com/reports?repository=my-application&tag=$IMAGE_VERSION" |\
                                jq -r '.Detections[].Detection | "\(.Severity) - \(.Type) - \(.Name) - \(.Title) - \(.Details.Match)"'

                echo "Vulnerabilities :"
                curl -s -X GET -H "Authorization: Bearer ${FALCON_API_BEARER_TOKEN}" \
                                "https://container-upload.us-1.crowdstrike.com/reports?repository=my-application&tag=$IMAGE_VERSION" |\
                                jq -r '.Vulnerabilities[].Vulnerability | "\(.CVEID)\t\(.Product.PackageSource)\t\(.Details.exploited.status)\t\(.Details.severity)\t\(.Details.exploitability_score)"'
                
                sleep 1
                exit 1
            else
                echo "IMAGE OK TO BE DEPLOYED ACCORDING TO IMAGE ASSESSMENT POLICY"
                exit 0
            fi

      - run:
          name: Auth to google using service account
          command: |
            echo "Auth to google using service account"
            DEPLOY=$(cat DEPLOY)
            if [ $DEPLOY = "true" ]; then
              echo -n $GOOGLE_SERVICE_KEY > key.json
              gcloud auth activate-service-account $GOOGLE_SERVICE_ACCOUNT_NAME --key-file=key.json --project=$GOOGLE_PROJECT
            else
              echo "DEPLOY=file => no deployment"
            fi

      - run:
          name: Does GKE cluster is up and running?
          command: |
            DEPLOY=$(cat DEPLOY)
            if [ $DEPLOY = "true" ]; then
              SERVER_NAME=$(gcloud container clusters  list --format='value(name)' --filter="name=$GOOGLE_STAGING_GKE")
              if [ -z "$SERVER_NAME" ]; then
                echo "Cluster doesn't exist creating it"
                gcloud container clusters create $GOOGLE_STAGING_GKE \
                     --region us-central1-c \
                     --workload-pool=$GOOGLE_PROJECT.svc.id.goog \
                     --labels $GOOGLE_ASSET_TAGS \
                     --machine-type "e2-standard-4" --image-type "UBUNTU_CONTAINERD" \
                     --num-nodes "2"
              else
                echo "Cluster already exist"
              fi
            else
              echo "DEPLOY=file => no deployment"
            fi

      - run:
          name: Setup Kubernetes config
          command: |
            DEPLOY=$(cat DEPLOY)
            if [ $DEPLOY = "true" ]; then
              echo "Setup Kubernetes config"
              # Get auth from the gcloud service account 
              gcloud container clusters get-credentials $GOOGLE_STAGING_GKE --zone us-central1-c --project $GOOGLE_PROJECT
            
              # Option 2 - inject a KUBE_CONFIG via a SECRET
              # mkdir -p $HOME/.kube
              # echo -n $KUBE_CONFIG_BASE64 | base64 -d >$HOME/.kube/config
              # kubectl config use-context ...

              # Check if the secret regcred is in the kubernetes cluster
              regcred=$(kubectl get secret regcred || echo "")
              if [ -z $regcred ]; then
                echo "Creating the regcred secret for the app"
                kubectl create secret docker-registry regcred \
                      --docker-server=$JFROG_HOST \
                      --docker-username=$JFROG_USER_DEPLOY_NAME \
                      --docker-password=$JFROG_USER_DEPLOY_PASSWORD \
                      --docker-email=fake@fakeemail.com
              fi
            else
              echo "DEPLOY=file => no deployment"
            fi

      - run:
          name: Deploy the manifest file
          command: |
            DEPLOY=$(cat DEPLOY)
            if [ $DEPLOY = "true" ]; then
              IMAGE_VERSION=$(cat MY_APP_VERSION)
              sed "s/MY_APP_VERSION/$IMAGE_VERSION/g" "my-application.yaml" > "generated-manifest.yaml"
              cat generated-manifest.yaml
              # deploy the file on the k8s cluster
              kubectl apply -f generated-manifest.yaml
            else
              echo "DEPLOY=file => no deployment"
            fi

workflows:
  deploy_application:
    jobs:
      - deploy_image:
          context:
            - cicd
