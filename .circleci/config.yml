version: 2.1

jobs:
  deploy_image:
    docker:
      - image: quay.io/crowdstrike/cloud-tools-image:latest
    steps:
      - checkout
      - setup_remote_docker:
          version: "20.10.11"
          docker_layer_caching: true

      - run:
          name: CrowdStrike Image Policy check
          command: |
            # get API token
            FALCON_API_BEARER_TOKEN=$(curl \
            --silent \
            --header "Content-Type: application/x-www-form-urlencoded" \
            --data "client_id=${FALCON_CLIENT_ID}&client_secret=${FALCON_CLIENT_SECRET}" \
            --request POST \
            --url "https://$FALCON_CLOUD_API/oauth2/token" | \
            python3 -c "import sys, json; print(json.load(sys.stdin)['access_token'])")

            IMAGE_VERSION=$(cat MY_APP_VERSION)
            RESPONSE=$(curl -s -X GET -H "Authorization: Bearer ${FALCON_API_BEARER_TOKEN}" \
                        "https://container-upload.us-1.crowdstrike.com/policy-checks?policy_type=image-prevention-policy&repository=cvi.jfrog.io/image-scan/my-application&tag=$IMAGE_VERSION" |\
                        jq -r '.resources[0]' )

            echo $RESPONSE

            DENY=$(echo $RESPONSE | jq -r '.deny')
            ACTION=$(echo $RESPONSE | jq -r '.action')

            echo $DENY
            echo $ACTION

            if [ $DENY == "true" ] && [ $ACTION == "block" ]; then
                echo "IMAGE BLOCKED DUE TO SECURITY POLICY"
                exit 1
            else
                echo "IMAGE OK TO BE DEPLOYED ACCORDING TO SECURITY POLICY"
                exit 0
            fi

      - run:
          name: Auth to google using service account
          command: |
            echo -n $GOOGLE_SERVICE_KEY > key.json
            gcloud auth activate-service-account $GOOGLE_SERVICE_ACCOUNT_NAME --key-file=key.json --project=$GOOGLE_PROJECT

      - run:
          name: Setup Kubernetes config
          command: |
            gcloud container clusters get-credentials cviaud-gke-helm-test-3 --zone us-central1-c --project $GOOGLE_PROJECT
          #mkdir -p $HOME/.kube
          #echo -n $KUBE_CONFIG_BASE64 | base64 -d >$HOME/.kube/config
          #kubectl config use-context gke_cviaud-gke_us-central1-c_cviaud-gke-helm-test-3

      - run:
          name: Deploy the manifest file
          command: |
            IMAGE_VERSION=$(cat MY_APP_VERSION)
            sed 's/MY_APP_VERSION/$IMAGE_VERSION/g' "my-application.yaml" > "generated-manifest.yml"

            kubectl apply -f generated-manifest.yml

workflows:
  deploy_application:
    jobs:
      - deploy_image:
          context:
            - cicd
